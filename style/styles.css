@import url(../node_modules/normalize.css/normalize.css);
.intrinsic-container {
  position: relative;
  height: 0;
  overflow: hidden; }

/* 16x9 Aspect Ratio */
.intrinsic-container-16x9 {
  padding-bottom: 56.25%; }

/* 4x3 Aspect Ratio */
.intrinsic-container-4x3 {
  padding-bottom: 75%; }

.intrinsic-container iframe {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  border: none; }

@font-face {
  font-family: 'Voto';
  src: url("../fonts/VotoSerifGX.ttf");
  font-weight: 1 999; }

@font-face {
  font-family: 'Avenir Next';
  src: url("../fonts/AvenirNext_Variable.ttf");
  font-weight: 1 999; }

@font-face {
  font-family: 'Source Serif';
  src: url("../fonts/SourceSerifVariable-Roman.ttf");
  font-weight: 1 999; }

@font-face {
  font-family: 'Source Code';
  src: url("../fonts/SourceCodeVariable-Roman.ttf");
  font-weight: 1 999; }

@font-face {
  font-family: 'Source Sans';
  src: url("../fonts/SourceSansVariable-Roman.ttf");
  font-weight: 1 999; }

@font-face {
  font-family: 'Lora';
  src: url("../fonts/Lora-VF.ttf");
  font-weight: 1 999; }

@font-face {
  font-family: 'Meta';
  src: url("../fonts/MetaVariableDemo-Roman.ttf");
  font-weight: 1 999; }

@font-face {
  font-family: 'Hepta Slab';
  src: url("../fonts/HeptaSlab-VF.ttf");
  font-weight: 1 999; }

@font-face {
  font-family: 'League Mono';
  src: url("../fonts/LeagueMonoVariable.ttf");
  font-weight: 1 999; }

@font-face {
  font-family: 'Secuela';
  src: url("../fonts/Secuela-Regular-v_1_787-TTF-VF.ttf");
  font-weight: 1 999; }

@font-face {
  font-family: 'Titillium';
  src: url("../fonts/TitilliumWeb-Roman-VF.ttf");
  font-weight: 1 999; }

@font-face {
  font-family: 'Crimson';
  src: url("../fonts/CrimsonPro-Roman-VF.ttf");
  font-weight: 1 999; }

@font-face {
  font-family: 'Changa';
  src: url("../fonts/Changa-VF.ttf");
  font-weight: 1 999; }

@font-face {
  font-family: 'Fira Code';
  src: url("../fonts/FiraCode-VF.ttf");
  font-weight: 1 999; }

@font-face {
  font-family: 'IBM Plex';
  src: url("../fonts/IBMPlexSansVar-Roman.ttf");
  font-weight: 1 999; }

@font-face {
  font-family: 'Public Sans';
  src: url("../fonts/PublicSans-Roman-VF.ttf");
  font-weight: 1 999; }

@font-face {
  font-family: 'Work Sans';
  src: url("../fonts/WorkSans-Roman-VF.ttf");
  font-weight: 1 999; }

.variable {
  font-weight: 1;
  transition: font-weight 1s ease; }
  .variable:hover {
    font-weight: 999; }

.voto {
  font-family: 'Voto'; }

.avenir {
  font-family: 'Avenir Next'; }

.source-serif {
  font-family: 'Source Serif'; }

.source-code {
  font-family: 'Source Code'; }

.source-sans {
  font-family: 'Source Sans'; }

.lora {
  font-family: 'Lora'; }

.meta {
  font-family: 'Meta'; }

.hepta-slab {
  font-family: 'Hepta Slab'; }

.league-mono {
  font-family: 'League Mono'; }

.secuela {
  font-family: 'Secuela'; }

.crimson {
  font-family: 'Crimson'; }

.titillium {
  font-family: 'Titillium'; }

.changa {
  font-family: 'Changa'; }

.firacode {
  font-family: 'Fira Code'; }

.plex {
  font-family: 'IBMPlex'; }

.public {
  font-family: 'Public Sans'; }

.work {
  font-family: 'Work Sans'; }

html {
  font-size: 16px; }

html {
  box-sizing: border-box; }

*, *:before, *:after {
  box-sizing: inherit; }

body {
  /*Setting the base font family*/
  font-family: "Open Sans", Helvetica, Roboto, Arial, sans-serif;
  /* font weight normalization */
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale; }

img {
  display: block;
  width: 100%;
  height: auto; }

.clearfix {
  zoom: 1;
  /* For IE 6/7 (trigger hasLayout) */ }
  .clearfix:before, .clearfix:after {
    content: "";
    display: table; }
  .clearfix:after {
    clear: both; }

sup, sub {
  vertical-align: baseline;
  position: relative;
  top: -0.4em; }

sub {
  top: 0.4em; }

h1 {
  font-size: 4em;
  margin-bottom: 0.125em; }

p {
  color: #343741; }

a {
  color: #b7006a;
  transition: color 0.5s ease; }
  a:hover {
    color: #980058; }

button, a.button {
  box-sizing: border-box;
  border: none;
  display: block;
  font-size: 0.875em;
  background-color: #b7006a;
  color: white;
  margin-bottom: 1em;
  padding: 0.5em;
  text-decoration: none;
  text-transform: uppercase;
  font-family: "Open Sans", Helvetica, Roboto, Arial, sans-serif;
  width: 100%;
  text-align: center;
  cursor: pointer;
  transition: background-color 0.5s ease;
  line-height: 1.2em;
  max-width: 300px; }
  button:hover, a.button:hover {
    background-color: #980058; }

button.download span::before, a.button.download span::before {
  content: url("data:image/svg+xml;charset=utf8,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%2214.9%22%20height%3D%2213.7%22%20viewBox%3D%220%200%2014.9%2013.7%22%3E%3Cstyle%3E.st0%7Bfill%3A%23fff%7D%3C%2Fstyle%3E%3Cpath%20class%3D%22st0%22%20style%3D%22fill%3A%23fff%22%20d%3D%22M14.9%2010v2.9c0%20.2-.1.4-.2.6-.2.2-.4.2-.6.2H.9c-.2%200-.4-.1-.6-.2s-.3-.4-.3-.6V10c0-.2.1-.4.2-.6s.4-.2.6-.2H5l1.2%201.2c.3.3.8.5%201.2.5.5%200%20.9-.2%201.2-.5l1.2-1.2H14c.2%200%20.4.1.6.2.2.2.3.4.3.6zM12%204.9c.1.2.1.5-.1.6l-4%204c-.2.2-.3.2-.5.2-.1%200-.3%200-.4-.2l-4-4c-.2-.1-.2-.3-.1-.6.1-.2.3-.3.5-.3h2.3v-4c0-.2.1-.3.2-.4s.2-.2.4-.2h2.3c.1%200%20.3.1.4.2.1.1.2.2.2.4v4h2.3c.2%200%20.4.1.5.3zm-.7%207.5c.1-.1.2-.2.2-.4s-.1-.3-.2-.4c-.1-.1-.2-.2-.4-.2s-.3.1-.4.2c-.1.1-.2.2-.2.4s.1.3.2.4.2.2.4.2c.1%200%20.2-.1.4-.2zm2.2%200c.1-.1.2-.2.2-.4s-.1-.3-.2-.4c-.1-.1-.2-.2-.4-.2s-.3.1-.4.2c-.1.1-.2.2-.2.4s.1.3.2.4.2.2.4.2.3-.1.4-.2z%22%2F%3E%3C%2Fsvg%3E%0A");
  display: inline-block;
  width: 15px;
  height: 14px;
  margin-right: 0.75em;
  position: relative;
  top: 1px; }

input[type='search'],
input[type='text'],
input[type='email'],
input[type='phone'],
input[type='state'],
textarea {
  width: 100%;
  box-sizing: border-box;
  padding: 0.5em 0.666em;
  color: #343741;
  font-family: inherit;
  font-size: 1rem;
  border-radius: 0;
  -webkit-border-radius: 0;
  -webkit-appearance: none; }

input[type='checkbox'] {
  display: none; }
  input[type='checkbox'] + label {
    display: flex;
    align-items: center;
    font-size: 1em; }
  input[type='checkbox'] + label::before {
    flex: 0 0 auto;
    content: '';
    display: block;
    background-color: rgba(255, 255, 255, 0.8);
    border: 1px solid #cfcfcf;
    border-radius: 0;
    -webkit-border-radius: 0;
    -webkit-appearance: none;
    height: 1.875em;
    width: 1.875em;
    margin: 0 0.5em 0 0;
    position: relative;
    top: 0; }
  input[type='checkbox']:checked + label::before {
    background-image: url("data:image/svg+xml;charset=utf8,%3Csvg width='24px' height='24px' viewBox='0 0 21 22' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3E%3Cg id='Page-1' stroke='none' stroke-width='1' fill='none' fill-rule='evenodd' stroke-linecap='round' stroke-linejoin='round'%3E\a         %3Cg id='Group-5' transform='translate(1.000000, 2.000000)' stroke='%23424143' stroke-width='3'%3E\a         %3Cpath d='M0.513513514,0 L18.6677568,17.6775' id='Stroke-1'%3E%3C/path%3E\a         %3Cpath d='M18.4120784,0.25285 L0.256808108,17.92985' id='Stroke-3'%3E%3C/path%3E%3C/g%3E%3C/g%3E%3C/svg%3E");
    background-repeat: no-repeat;
    background-position: center center; }

body {
  background: white; }

section {
  padding: 2.25em; }

/* ==========================================================================
   Print styles
   ========================================================================== */
@media print {
  *,
  *:before,
  *:after {
    background: transparent !important;
    color: #000 !important;
    box-shadow: none !important;
    text-shadow: none !important; }
  a,
  a:visited {
    text-decoration: underline; }
  a[href]:after {
    content: " (" attr(href) ")"; }
  abbr[title]:after {
    content: " (" attr(title) ")"; }
  a[href^="#"]:after,
  a[href^="javascript:"]:after {
    content: ""; }
  pre,
  blockquote {
    border: 1px solid #999;
    page-break-inside: avoid; }
  thead {
    display: table-header-group; }
  tr,
  img {
    page-break-inside: avoid; }
  img {
    max-width: 100% !important; }
  p,
  h2,
  h3 {
    orphans: 3;
    widows: 3; }
  h2,
  h3 {
    page-break-after: avoid; } }

@keyframes fadeOut {
  0% {
    opacity: 1;
    visibility: visible; }
  100% {
    opacity: 0;
    visibility: hidden; } }

@keyframes fadeIn {
  0% {
    opacity: 0;
    visibility: hidden; }
  100% {
    opacity: 1;
    visibility: visible; } }

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
